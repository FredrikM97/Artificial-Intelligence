/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package philosophers;
import static java.lang.Thread.interrupted;
import static java.lang.Thread.sleep;

/**
 *
 * @author Mattias Hallef√§lt
 */
public class Philosophers2 extends Thread{
    private static final int NUM_PHIL = 5;
    private static int RunCnt[] = new int[NUM_PHIL]; // Counter for eating (Task 4)
    private static boolean chosen[] = new boolean[NUM_PHIL];
    
    private static Object[] forks = new Object[NUM_PHIL];
    private Thread[] phils = new Thread[NUM_PHIL];
	
    /** Waiter thread  control **/
	public void run() {
            for(Thread p : phils) p.start();
            int currentPhilFirst = 0;
            int currentPhilsSecoend = 2;
            
            try { Thread.sleep(50); } catch(InterruptedException ie) {}
            
            while(!interrupted()) { 
                    if(!chosen[currentPhilFirst]){
                        currentPhilFirst = SwitchPhil(currentPhilFirst);
                    }
                    
                    if(!chosen[currentPhilsSecoend]){
                        currentPhilsSecoend = SwitchPhil(currentPhilsSecoend);
                    }
                    
                    synchronized(this){
                        try {
                            this.wait();
                        } catch (InterruptedException ex) {break;}
                    }
            }   
            for(Thread p: phils) p.interrupt();
	}
   
    private int SwitchPhil(int currentPhil){
        currentPhil = (currentPhil + 1) % NUM_PHIL;
        chosen[currentPhil] = true;
                        
        Thread phil = phils[currentPhil];                
        if(phil != null) {
            synchronized(phil) { 
                phil.notify(); 
            }
        }
        return currentPhil;
    }    
        
    static class Philosopher extends Thread {
        private final Object leftFork, rightFork;
        private final int id;
        private long lastCall = 0;
        Philosophers2 scheduler;

        public Philosopher(int id, Philosophers2 scheduler, Object leftFork, Object rightFork) {
            this.id = id;
            scheduler.phils[id] = this;
            this.leftFork = leftFork;
            this.rightFork = rightFork;
            this.scheduler = scheduler;
        }
        
        private void eat() throws InterruptedException {
            long myPeriod = (lastCall == 0) ? 0 : System.nanoTime() - lastCall;
			lastCall = System.nanoTime();
			System.out.printf("Period from Philosopher %d: %.3f\n", id, myPeriod/1000000.0); 
            //System.out.println("Philosopher "+id+" is eating.");
            RunCnt[id]++;
            // delay
            Thread.sleep(100);
        }

        private void think() throws InterruptedException {
            //System.out.println("Philosopher "+id+" is thinking.");
            // delay
            Thread.sleep(10);
        }

        private void waiting() throws InterruptedException {
            //System.out.println("Philosopher "+id+" is waiting.");
            // delay
            synchronized(this){
                this.wait();
            }
        }

        public void run() {           
            while(!interrupted()) {
                try {
                    think();
                    waiting();
                    if(chosen[id]){
                        synchronized(leftFork){
                            synchronized(rightFork){
                                eat();
                            }
                        }
                        chosen[id] = false;
                        synchronized(scheduler){
                            scheduler.notify();
                        }
                    }
                } catch (InterruptedException ex) { break; }
            }
        }
    }
    
    public static void main(String[] args) throws InterruptedException {
        // Create scheduler
        Philosophers2 p = new Philosophers2();
        Philosopher[] ph = new Philosopher[NUM_PHIL];
        // Create forks
        for(int i=0; i<NUM_PHIL; i++) forks[i]=new Object();
        for(int i=0; i<NUM_PHIL; i++){
            // Even though Deadlock doesnt occur this should fix it 
            ph[i]=new Philosopher(i, p, forks[i], forks[(i+1) % NUM_PHIL]);
        }
        // Start Scheduler
        p.start();
        sleep(10000); // Idle here
        System.out.print("KILL \n");
        // Request termination
        p.interrupt(); 
        p.join();

        // Print stats
        for(int i = 0; i < NUM_PHIL; i++){ 
            System.out.print("ID: " + i + " Count: " + RunCnt[i] + "\n");
        }
    }
}
